[
    {
        "steps": [
            [
                {
                    "name": "p",
                    "value": [
                        {
                            "name": "img",
                            "attributes": {
                                "src": "https://cloud.githubusercontent.com/assets/5138735/8224683/6bf74d38-1593-11e5-9dac-a94892e13cbc.jpg",
                                "style": "width: 800px; height: 500px; max-height: none; max-width: none; position: absolute; z-index: 4; left: 100px; top: 6px;",
                                "class": "absolute-element"
                            }
                        }
                    ]
                },
                {
                    "name": "h2",
                    "attributes": {
                        "class": "absolute-element",
                        "style": "position: absolute; width: 800px; height: 300px; z-index: 4; left: 100px; top: 550px;"
                    },
                    "value": "Event Driven Overview"
                }
            ]
        ]
    },
    {
        "steps": [
            [
                {
                    "name": "p",
                    "value": [
                        {
                            "name": "img",
                            "attributes": {
                                "src": "https://cloud.githubusercontent.com/assets/5138735/8225468/aa893d86-159d-11e5-9687-4cedaacfb151.jpg",
                                "style": "width: 800px; height: 500px; max-height: none; max-width: none; position: absolute; z-index: 4; left: 100px; top: 6px;",
                                "class": "absolute-element"
                            }
                        }
                    ]
                },
                {
                    "name": "h3",
                    "attributes": {
                        "class": "absolute-element",
                        "style": "position: absolute; width: 800px; height: 300px; z-index: 4; left: 100px; top: 550px;"
                    },
                    "value": "Software Components Exchange Information"
                },
                {
                    "name": "notes",
                    "value": [
                        "Itai: Every Software system is based on multiple software components",
                        "Those components exchange information between them constantly"
                    ]
                }
            ]
        ]
    },
    {
        "steps": [
            [
                {
                    "name": "p",
                    "value": [
                        {
                            "name": "img",
                            "attributes": {
                                "src": "https://cloud.githubusercontent.com/assets/5138735/8224774/0a14213e-1595-11e5-9f6a-24aa8bc43660.jpg",
                                "style": "width: 400px; height: 500px; max-height: none; max-width: none; position: absolute; z-index: 4; left: 300px; top: 6px;",
                                "class": "absolute-element"
                            }
                        }
                    ]
                },
                {
                    "name": "h3",
                    "attributes": {
                        "class": "absolute-element",
                        "style": "position: absolute; width: 800px; height: 300px; z-index: 4; left: 100px; top: 550px;"
                    },
                    "value": "Producers Supply Information"
                },
                {
                    "name": "notes",
                    "value": [
                        "Miki: Information exchanging requires two side",
                        "One is the producers, which creates, and supply the information"
                    ]
                }
            ]
        ]
    },
    {
        "steps": [
            [
                {
                    "name": "p",
                    "value": [
                        {
                            "name": "img",
                            "attributes": {
                                "src": "https://cloud.githubusercontent.com/assets/3624786/8219235/3913b90c-1551-11e5-979d-43e3a268d00b.png",
                                "style": "width: 800px; height: 500px; max-height: none; max-width: none; position: absolute; z-index: 4; left: 100px; top: 6px;",
                                "class": "absolute-element"
                            }
                        }
                    ]
                },
                {
                    "name": "h3",
                    "attributes": {
                        "class": "absolute-element",
                        "style": "position: absolute; width: 800px; height: 300px; z-index: 4; left: 100px; top: 550px;"
                    },
                    "value": "Consumers Receive Information"
                },
                {
                    "name": "notes",
                    "value": [
                        "Mik: The second is the consumer, which consumes and handle this information"
                    ]
                }
            ]
        ]
    },
    {
        "steps": [
            [
                {
                    "name": "p",
                    "value": [
                        {
                            "name": "img",
                            "attributes": {
                                "src": "https://cloud.githubusercontent.com/assets/3624786/7649629/72809512-faf7-11e4-83e1-155d6b1b804c.png",
                                "style": "width: 800px; height: 500px; max-height: none; max-width: none; position: absolute; z-index: 4; left: 100px; top: 6px;",
                                "class": "absolute-element"
                            }
                        }
                    ]
                },
                {
                    "name": "h3",
                    "attributes": {
                        "class": "absolute-element",
                        "style": "position: absolute; width: 800px; height: 300px; z-index: 4; left: 100px; top: 550px;"
                    },
                    "value": "How Does Information Flow?"
                },
                {
                    "name": "notes",
                    "value": [
                        "Itai: Easy, But how does information flow?"
                    ]
                }
            ]
        ]
    },
    {
        "steps": [
            [
                {
                    "name": "p",
                    "value": [
                        {
                            "name": "img",
                            "attributes": {
                                "src": "https://cloud.githubusercontent.com/assets/3624786/8147869/e8f88508-1288-11e5-83e7-0453ab273d35.gif",
                                "style": "width: 800px; height: 500px; max-height: none; max-width: none; position: absolute; z-index: 4; left: 100px; top: 6px;",
                                "class": "absolute-element"
                            }
                        },
                        {
                            "name": "img",
                            "attributes": {
                                "src": "https://cloud.githubusercontent.com/assets/5138735/8226612/e08821da-15a8-11e5-90dd-513a04e7cdc7.jpg",
                                "style": "width: 800px; height: 500px; max-height: none; max-width: none; position: absolute; z-index: 4; left: 100px; top: 6px;",
                                "class": "absolute-element fragment",
                                "data-fragment-index": "0"
                            }
                        },
                        {
                            "name": "img",
                            "attributes": {
                                "src": "https://cloud.githubusercontent.com/assets/5138735/8226578/a2d88df2-15a8-11e5-89a0-592cb89a57d2.jpg",
                                "style": "width: 800px; height: 500px; max-height: none; max-width: none; position: absolute; z-index: 4; left: 100px; top: 6px;",
                                "class": "absolute-element fragment",
                                "data-fragment-index": "1"
                            }
                        }
                    ]
                },
                {
                    "name": "div",
                    "attributes": {
                        "class": "absolute-element",
                        "style": "position: absolute; width: 800px; height: 300px; z-index: 4; left: 100px; top: 550px;"
                    },
                    "value": [
                        {
                            "name": "h3",
                            "value": "Pull:"
                        },
                        {
                            "name": "h3",
                            "value": "Request/Response & Direct API Call Model"
                        }
                    ]
                },
                {
                    "name": "notes",
                    "value": [
                        "Miki: There are multiple models for this kind of interaction right?",
                        "One model, is based on Pulling",
                        "An example for that, can be the request, response Model, Or direct API calls"
                    ]
                }
            ]
        ]
    },
    {
        "steps": [
            [
                {
                    "name": "p",
                    "value": [
                        {
                            "name": "img",
                            "attributes": {
                                "src": "https://cloud.githubusercontent.com/assets/3624786/7750603/da33b55a-ffdd-11e4-9109-3c7c68c7cb1e.gif",
                                "style": "width: 800px; height: 500px; max-height: none; max-width: none; position: absolute; z-index: 4; left: 100px; top: 6px;",
                                "class": "absolute-element"
                            }
                        },
                        {
                            "name": "img",
                            "attributes": {
                                "src": "https://cloud.githubusercontent.com/assets/5138735/8225921/b90f5b88-15a2-11e5-9bc0-b44bfd412497.jpg",
                                "style": "width: 800px; height: 500px; max-height: none; max-width: none; position: absolute; z-index: 4; left: 100px; top: 6px;",
                                "class": "absolute-element fragment",
                                "data-fragment-index": "0"
                            }
                        },
                        {
                            "name": "img",
                            "attributes": {
                                "src": "https://cloud.githubusercontent.com/assets/5138735/8225910/88b26bb0-15a2-11e5-9097-5d27f619422a.jpg",
                                "style": "width: 800px; height: 500px; max-height: none; max-width: none; position: absolute; z-index: 4; left: 100px; top: 6px;",
                                "class": "absolute-element fragment",
                                "data-fragment-index": "1"
                            }
                        },
                        {
                            "name": "img",
                            "attributes": {
                                "src": "https://cloud.githubusercontent.com/assets/5138735/8225890/52b11052-15a2-11e5-9c8e-2b2a64a99aad.jpg",
                                "style": "width: 800px; height: 500px; max-height: none; max-width: none; position: absolute; z-index: 4; left: 100px; top: 6px;",
                                "class": "absolute-element fragment",
                                "data-fragment-index": "2"
                            }
                        }
                    ]
                },
                {
                    "name": "div",
                    "attributes": {
                        "class": "absolute-element",
                        "style": "position: absolute; width: 800px; height: 300px; z-index: 4; left: 100px; top: 550px;"
                    },
                    "value": [
                        {
                            "name": "h3",
                            "value": "Push:"
                        },
                        {
                            "name": "h3",
                            "value": "Callback Model"
                        }
                    ]
                },
                {
                    "name": "notes",
                    "value": [
                        "Miki: Another option, is a Push based model, such as callbacks",
                        "Example: reading a file in NodeJS providing callback for when the file is ready."
                    ]
                }
            ]
        ]
    },
    {
        "steps": [
            [
                {
                    "name": "p",
                    "value": [
                        {
                            "name": "img",
                            "attributes": {
                                "src": "https://cloud.githubusercontent.com/assets/3624786/7652512/00810f72-fb16-11e4-8773-f123daa53986.png",
                                "style": "width: 800px; height: 500px; max-height: none; max-width: none; position: absolute; z-index: 4; left: 100px; top: 6px;",
                                "class": "absolute-element"
                            }
                        }
                    ]
                },
                {
                    "name": "h3",
                    "attributes": {
                        "class": "absolute-element",
                        "style": "position: absolute; width: 800px; height: 300px; z-index: 4; left: 100px; top: 550px;"
                    },
                    "value": "The Consumer Needs to Know The Producer"
                },
                {
                    "name": "notes",
                    "value": [
                        "Itai: Yep, but those requires that the consumer will know the producer",
                        "This means that the consumer needs to hold a reference to the producer in order to call its API"
                    ]
                }
            ]
        ]
    },
    {
        "steps": [
            [
                {
                    "name": "div",
                    "value": [
                        {
                            "name": "span",
                            "attributes": {
                                "style": "font-style: italic; font-weight: bold; font-size: 52px; line-height: 70px;"
                            },
                            "value": "\"Each part of the architecture is like a puzzle, No single piece needs to know what the picture is, All that matters is that the piece does its own job correctly\"<br><br>"
                        },
                        {
                            "name": "span",
                            "attributes": {
                                "style": "font-size: 20px;"
                            },
                            "value": " - Nicholas Zakas, "
                        },
                        {
                            "name": "a",
                            "attributes": {
                                "href": "http://www.slideshare.net/nzakas/scalable-javascript-application-architecture",
                                "style": "font-size: 20px; text-decoration: none; color: black;"
                            },
                            "value": "Scalable JavaScript Application Architecture"
                        }
                    ]
                },
                {
                    "name": "notes",
                    "value": "In order to ensure low coupling, in large scale applications, modules must be entirely independent of one another, and should not communicate directly with one another."
                },
                {
                    "name": "notes",
                    "value": [
                        "Itai: When we want to create a scalable architecture, it is better to treat each part as a puzzle piece which should not know the other pieces but only it's part inside the puzzle",
                        "Miki: Right, Do only one job, but do it well"
                    ]
                }
            ]
        ]
    },
    {
        "steps": [
            [
                {
                    "name": "p",
                    "value": [
                        {
                            "name": "img",
                            "attributes": {
                                "src": "https://cloud.githubusercontent.com/assets/3624786/7653368/039489a2-fb1e-11e4-801c-8197019ad6a8.png",
                                "style": "width: 800px; height: 500px; max-height: none; max-width: none; position: absolute; z-index: 4; left: 100px; top: 6px;",
                                "class": "absolute-element"
                            }
                        },
                        {
                            "name": "img",
                            "attributes": {
                                "src": "https://cloud.githubusercontent.com/assets/5138735/8226313/3484f428-15a6-11e5-8123-d62bbd3a291c.jpg",
                                "style": "width: 800px; height: 500px; max-height: none; max-width: none; position: absolute; z-index: 4; left: 100px; top: 6px;",
                                "class": "absolute-element fragment",
                                "data-fragment-index": "0"
                            }
                        },
                        {
                            "name": "img",
                            "attributes": {
                                "src": "https://cloud.githubusercontent.com/assets/5138735/8226289/030237a8-15a6-11e5-9dfa-0943fddd9c11.jpg",
                                "style": "width: 800px; height: 500px; max-height: none; max-width: none; position: absolute; z-index: 4; left: 100px; top: 6px;",
                                "class": "absolute-element fragment",
                                "data-fragment-index": "1"
                            }
                        },
                        {
                            "name": "img",
                            "attributes": {
                                "src": "https://cloud.githubusercontent.com/assets/5138735/8226279/f2a92fc4-15a5-11e5-99cb-cdc0860a959e.jpg",
                                "style": "width: 800px; height: 500px; max-height: none; max-width: none; position: absolute; z-index: 4; left: 100px; top: 6px;",
                                "class": "absolute-element fragment",
                                "data-fragment-index": "2"
                            }
                        },
                        {
                            "name": "img",
                            "attributes": {
                                "src": "https://cloud.githubusercontent.com/assets/5138735/8226126/8eada276-15a4-11e5-84e6-16b3656a8459.jpg",
                                "style": "width: 800px; height: 500px; max-height: none; max-width: none; position: absolute; z-index: 4; left: 100px; top: 6px;",
                                "class": "absolute-element fragment",
                                "data-fragment-index": "3"
                            }
                        }
                    ]
                },
                {
                    "name": "h3",
                    "attributes": {
                        "class": "absolute-element",
                        "style": "position: absolute; width: 800px; height: 300px; z-index: 4; left: 100px; top: 550px;"
                    },
                    "value": "Event Driven (Mainly Follows the Pub/Sub Pattern)"
                },
                {
                    "name": "notes",
                    "value": [
                        "Miki: And this brings us, to a third model, which is the event driven model also referred to as Pub/Sub or Observer",
                        "So How does event driven works?",
                        "Both, consumer and producer, know only one entity in the system, the Event Bus",
                        "Event bus holds all the registered consumers and when triggered by the producer, it will publish an event to all registered consumers"
                    ]
                }
            ]
        ]
    },
    {
        "steps": [
            [
                {
                    "name": "h2",
                    "value": "Pros"
                },
                {
                    "name": "img",
                    "attributes": {
                        "src": "https://cloud.githubusercontent.com/assets/3624786/8115653/8bc14802-1085-11e5-9372-962cc31afae6.png",
                        "style": "width: 120px;"
                    }
                },
                {
                    "name": "div",
                    "attributes": {
                        "style": "height: 800px;"
                    },
                    "value": [
                        {
                            "name": "ul",
                            "value": [
                                {
                                    "name": "li",
                                    "attributes": {
                                        "class": "fragment",
                                        "data-fragment-index": "0",
                                        "style": "line-height: 80px;"
                                    },
                                    "value": "Flexible"
                                },
                                {
                                    "name": "li",
                                    "attributes": {
                                        "class": "fragment",
                                        "data-fragment-index": "0",
                                        "style": "line-height: 90px;"
                                    },
                                    "value": "Extensible"
                                },
                                {
                                    "name": "li",
                                    "attributes": {
                                        "class": "fragment",
                                        "data-fragment-index": "1",
                                        "style": "line-height: 60px;"
                                    },
                                    "value": "Encourages SoC by Reducing Coupling and Increasing Cohesion"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "notes",
                    "value": [
                        "Itai: Amazing! This will allow;",
                        "Flexibility & Extensibility - since we can add or remove as many consumers as we want without having to change our architecture",
                        "It is also encourages SoC by reducing the coupling and increasing the cohesion",
                        "Miki: You cannot just drop buzzwords as Coupling and Cohesion, Please explain"
                    ]
                }
            ]
        ]
    },
    {
        "steps": [
            [
                {
                    "name": "div",
                    "value": [
                        {
                            "name": "ul",
                            "value": [
                                {
                                    "name": "li",
                                    "attributes": {
                                        "style": "line-height: 50px;"
                                    },
                                    "value": "Coupling: The Degree of Dependency Between Modules<br><br>"
                                },
                                {
                                    "name": "li",
                                    "attributes": {
                                        "class": "fragment",
                                        "data-fragment-index": "0",
                                        "style": "line-height: 50px;"
                                    },
                                    "value": "Cohesion: The Measure of How Strongly-Related is the Set of Functions Performed by a Module"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "notes",
                    "value": [
                        "Itai: OK, Behind any structured programing principles, there is structured design with its two main core principles: Coupling & Cohesion",
                        "As you all know (probably apart from my friend Miki here), Coupling is the degree of dependency between modules",
                        "And Cohesion is the degree of relation between a set of function on a module"
                    ]
                }
            ]
        ]
    },
    {
        "steps": [
            [
                {
                    "name": "h2",
                    "value": "Cons"
                },
                {
                    "name": "img",
                    "attributes": {
                        "src": "https://cloud.githubusercontent.com/assets/3624786/8115636/6c4e8ba6-1085-11e5-806d-ed916000f6e8.png",
                        "style": "width: 120px;"
                    }
                },
                {
                    "name": "div",
                    "attributes": {
                        "style": "height: 800px;"
                    },
                    "value": [
                        {
                            "name": "ul",
                            "value": [
                                {
                                    "name": "li",
                                    "attributes": {
                                        "class": "fragment",
                                        "data-fragment-index": "0",
                                        "style": "line-height: 90px;"
                                    },
                                    "value": "Control Flow"
                                },
                                {
                                    "name": "li",
                                    "attributes": {
                                        "class": "fragment",
                                        "data-fragment-index": "0"
                                    },
                                    "value": "Complexity - Harder to Follow and Debug"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "notes",
                    "value": [
                        "יש הטוענים כי שימוש באיבנטים ואיבנט באס מביאים איתם מספר חסרונות: קונטרול פלו בעייתי ומורכבות מכיוון שסדר האיבנטים אינו ידוע וסדר הקריאה להנדלרים לא ידוע וגם יכול להשתנות.",
                        "מכאן שגם קיים קושי לדבג את הפלו. לכן כאשר האפליקציה שלנו היא איבנט דריבן ואנחנו משתמשים באיבנטים אנחנו לעולם לא נסתמך על הסדר שלהם. "
                    ]
                }
            ]
        ]
    },
    {
        "steps": [
            [
                {
                    "name": "h3",
                    "value": "Javascript is Callback Driven by Nature"
                },
                {
                    "name": "notes",
                    "value": [
                        "Itai: And coming to javascript, so Javascript is callback driven by nature"
                    ]
                }
            ]
        ]
    },
    {
        "steps": [
            [
                {
                    "name": "p",
                    "attributes": {
                        "style": "height: 600px;"
                    },
                    "value": [
                        {
                            "name": "textarea",
                            "attributes": {
                                "id": "native_events_snippet",
                                "class": "code absolute-element",
                                "mode": "javascript",
                                "style": "width: 900px; height: 140px; max-height: none; max-width: none; position: absolute; z-index: 4; left: 50px; top: 100px;"
                            },
                            "value": ""
                        }
                    ]
                },
                {
                    "name": "notes",
                    "value": [
                        "Itai: If we'll look at a basic example of a javascript DOM button, lets say we have a belly button for example",
                        "We can interact with it by assigning an handler for the click event - You all know this basic example"
                    ]
                }
            ]
        ]
    },
    {
        "steps": [
            [
                {
                    "name": "h3",
                    "attributes": {
                        "style": "line-height: 70px;"
                    },
                    "value": "MVC Frameworks, Embraces SoC and Supplies Needed Tools for Using Pub/Sub"
                },
                {
                    "name": "notes",
                    "value": [
                        "Itai: This was a very basic example for some native javascript code, but usually, we work with frameworks and libraries which abstract many things and allows us to better modularize our code",
                        "All of those MVC frameworks, embraces SoC and also supplies internal tools for implementing Pub/Sub model as part of the framework."
                    ]
                }
            ]
        ]
    },
    {
        "steps": [
            [
                {
                    "name": "div",
                    "attributes": {
                        "style": "height: 100px;"
                    },
                    "value": [
                        {
                            "name": "textarea",
                            "attributes": {
                                "id": "backbone_message_service_snippet.0",
                                "class": "code absolute-element",
                                "mode": "javascript"
                            },
                            "value": ""
                        }
                    ]
                },
                {
                    "name": "div",
                    "attributes": {
                        "style": "height: 400px;",
                        "class": "fragment",
                        "data-fragment-index": "0"

                    },
                    "value": [
                        {
                            "name": "textarea",
                            "attributes": {
                                "id": "backbone_message_service_snippet.1",
                                "class": "code absolute-element",
                                "mode": "javascript"
                            },
                            "value": ""
                        }
                    ]
                },
                {
                    "name": "notes",
                    "value": [
                        "Itai: Backbone, for example, have the Backbone.Events which allows simple consuming and triggering of events"
                    ]
                }
            ]
        ]
    },
    {
        "steps": [
            [
                {
                    "name": "div",
                    "attributes": {
                        "style": "height: 35px;"
                    },
                    "value": [
                        {
                            "name": "textarea",
                            "attributes": {
                                "id": "backbone_model_snippet.0",
                                "class": "code absolute-element",
                                "mode": "javascript"
                            },
                            "value": ""
                        }
                    ]
                },
                {
                    "name": "div",
                    "attributes": {
                        "style": "height: 230px;",
                        "class": "fragment",
                        "data-fragment-index": "0"

                    },
                    "value": [
                        {
                            "name": "textarea",
                            "attributes": {
                                "id": "backbone_model_snippet.1",
                                "class": "code absolute-element",
                                "mode": "javascript"
                            },
                            "value": ""
                        }
                    ]
                },
                {
                    "name": "div",
                    "attributes": {
                        "style": "height: 300px;",
                        "class": "fragment",
                        "data-fragment-index": "1"

                    },
                    "value": [
                        {
                            "name": "textarea",
                            "attributes": {
                                "id": "backbone_model_snippet.2",
                                "class": "code absolute-element",
                                "mode": "javascript"
                            },
                            "value": ""
                        }
                    ]
                },
                {
                    "name": "notes",
                    "value": [
                        "Itai: Backbone itself uses the Backbone.Events to implement allow changes awareness on the Backbone.Model",
                        "In this Homer Example, when Homer eats a doughnut, an event is triggered and the view redraws a fatter homer"
                    ]
                }
            ]
        ]
    },
    {
        "steps": [
            [
                {
                    "name": "h2",
                    "value": "iOS NSNotification"
                },
                {
                    "name": "div",
                    "attributes": {
                        "style": "height: 600px; width: 900px; margin-top: 100px; text-align: left;"
                    },
                    "value": [
                        {
                            "name": "ul",
                            "value": [
                                {
                                    "name": "li",
                                    "attributes": {
                                        "class": "fragment",
                                        "data-fragment-index": "0",
                                        "style": "line-height: 80px;"
                                    },
                                    "value": "Encapsulates information so that it can be broadcast to other objects"
                                },
                                {
                                    "name": "li",
                                    "attributes": {
                                        "class": "fragment",
                                        "data-fragment-index": "1",
                                        "style": "line-height: 80px;"
                                    },
                                    "value": "Broadcast done using NSNotificationCenter object"
                                },
                                {
                                    "name": "li",
                                    "attributes": {
                                        "class": "fragment",
                                        "data-fragment-index": "1",
                                        "style": "line-height: 90px;"
                                    },
                                    "value": "Contains name that is a tag for identifying the notification"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "notes",
                    "value": [
                        "write stuffItai: The scope is the glue for everything. It acts as the elements which connects the controllers, the data and the presentation layer.",
                        "When trying to create a controller to controller communication, the simplest way for controllers to communicate is through the use of scope. Each time a controller is instantiated within another controller, that controller (the child) inherits the scope from the parent controller.",
                        "Inherited scope, though, does not deal with communication between siblings. For that, we can used event-based communication with the Angular services $on, $emit, and $broadcast."
                    ]
                }
            ]
        ]
    },
    {
        "steps": [
            [
                {
                    "name": "div",
                    "attributes": {
                        "style": "height: 380px;"
                    },
                    "value": [
                        {
                            "name": "textarea",
                            "attributes": {
                                "id": "angular_message_service_snippet.0",
                                "class": "code absolute-element",
                                "mode": "javascript"
                            },
                            "value": ""
                        }
                    ]
                },
                {
                    "name": "div",
                    "attributes": {
                        "style": "height: 600px;",
                        "class": "fragment",
                        "data-fragment-index": "0"

                    },
                    "value": [
                        {
                            "name": "textarea",
                            "attributes": {
                                "id": "angular_message_service_snippet.1",
                                "class": "code absolute-element",
                                "mode": "javascript"
                            },
                            "value": ""
                        }
                    ]
                },
                {
                    "name": "notes",
                    "value": [
                        "All instances of TestClass will be notified"
                    ]
                }
            ]
        ]
    },
    {
        "steps": [
            [
                {
                    "name": "h2",
                    "value": "NodeJS EventEmitter"
                },
                {
                    "name": "div",
                    "attributes": {
                        "style": "height: 600px; width: 900px; margin-top: 100px; text-align: left;"
                    },
                    "value": [
                        {
                            "name": "ul",
                            "value": [
                                {
                                    "name": "li",
                                    "attributes": {
                                        "class": "fragment",
                                        "data-fragment-index": "0",
                                        "style": "line-height: 80px;"
                                    },
                                    "value": "Native Event Bus implementation for NodeJS"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "notes",
                    "value": [
                        "write stuff"
                    ]
                }
            ]
        ]
    },
    {
        "steps": [
            [
                {
                    "name": "div",
                    "attributes": {
                        "style": "height: 30px;"
                    },
                    "value": [
                        {
                            "name": "textarea",
                            "attributes": {
                                "id": "angular_scope_snippet.0",
                                "class": "code absolute-element",
                                "mode": "javascript"
                            },
                            "value": ""
                        }
                    ]
                },
                {
                    "name": "div",
                    "attributes": {
                        "style": "height: 200px;",
                        "class": "fragment",
                        "data-fragment-index": "0"

                    },
                    "value": [
                        {
                            "name": "textarea",
                            "attributes": {
                                "id": "angular_scope_snippet.1",
                                "class": "code absolute-element",
                                "mode": "javascript"
                            },
                            "value": ""
                        }
                    ]
                },
                {
                    "name": "div",
                    "attributes": {
                        "style": "height: 300px;",
                        "class": "fragment",
                        "data-fragment-index": "1"

                    },
                    "value": [
                        {
                            "name": "textarea",
                            "attributes": {
                                "id": "angular_scope_snippet.2",
                                "class": "code absolute-element",
                                "mode": "javascript"
                            },
                            "value": ""
                        }
                    ]
                },
                {
                    "name": "notes",
                    "value": [
                        "Itai: In this example, we are using the message service to assemble the avengers across multiple different controllers",
                        "So this is how we can use event driven concepts with the given tools of the framework we are working with"
                    ]
                }
            ]
        ]
    },
    {
        "steps": [
            [
                {
                    "name": "div",
                    "attributes": {
                        "style": "width: 100%; height: 550px; max-height: none; max-width: none;"
                    },
                    "value": [
                        {
                            "name": "img",
                            "attributes": {
                                "src": "https://cloud.githubusercontent.com/assets/5138735/8149032/bda7608c-12be-11e5-9bba-a4be4d7e56e2.png",
                                "style": "border: none; box-shadow: none; width: 389px; height: 543px; max-height: none; max-width: none; position: absolute; z-index: 4; left: 300px; top: 6;",
                                "class": "absolute-element"
                            }
                        }
                    ]
                },
                {
                    "name": "h3",
                    "attributes": {
                        "class": "absolute-element",
                        "style": "position: absolute; width: 586px; height: 65px; z-index: 4; left: 200px; top: 587px; font-weight: bold;"
                    },
                    "value": "Meet <a href=\"https://github.com/LivePersonInc/chronosjs\">chronosjs</a>!"
                },
                {
                    "name": "notes",
                    "value": [
                        "Miki: But you can never have to many frameworks and I think we can do it better",
                        "Meet ChronosJS"
                    ]
                }
            ]
        ]
    },
    {
        "steps": [
            [
                {
                    "name": "img",
                    "attributes": {
                        "src": "https://cloud.githubusercontent.com/assets/3624786/8115653/8bc14802-1085-11e5-9372-962cc31afae6.png",
                        "style": "width: 120px;"
                    }
                },
                {
                    "name": "h3",
                    "attributes": {
                        "style": "line-height: 70px;"
                    },
                    "value": "A Native Javascript Event Channels (Pub/Sub) Implementation"
                },
                {
                    "name": "notes",
                    "value": [
                        "Miki: ChronosJS is a native javascript library implementing event channels",
                        "It allows high level of granularity by using two levels of registration with AppName and EventName, and supporting wildcard",
                        "ChronosJs provides 3 models of interactions:",
                        "1) The basic events which allows multiple consumers for a single producer",
                        "2) Commands which provides a one2one relationship between consumer and the producer",
                        "3) And Request/Response which extends the commands model by also allowing a return value from the producer",
                        "Chronos is good for sync and async bindings while the data, can be passed by reference or by value as a clone",
                        "It is Lightweight",
                        "with no additional dependencies"
                    ]
                }
            ]
        ]
    },
    {
        "steps": [
            [
                {
                    "name": "img",
                    "attributes": {
                        "src": "https://cloud.githubusercontent.com/assets/3624786/8115653/8bc14802-1085-11e5-9372-962cc31afae6.png",
                        "style": "width: 120px;"
                    }
                },
                {
                    "name": "h3",
                    "attributes": {
                        "style": "line-height: 70px;"
                    },
                    "value": "High Level of Granularity with AppName & EventName"
                },
                {
                    "name": "notes",
                    "value": [
                        "Miki: ChronosJS is a native javascript library implementing event channels",
                        "It allows high level of granularity by using two levels of registration with AppName and EventName, and supporting wildcard",
                        "ChronosJs provides 3 models of interactions:",
                        "1) The basic events which allows multiple consumers for a single producer",
                        "2) Commands which provides a one2one relationship between consumer and the producer",
                        "3) And Request/Response which extends the commands model by also allowing a return value from the producer",
                        "Chronos is good for sync and async bindings while the data, can be passed by reference or by value as a clone",
                        "It is Lightweight",
                        "with no additional dependencies"
                    ]
                }
            ]
        ]
    },
    {
        "steps": [
            [
                {
                    "name": "img",
                    "attributes": {
                        "src": "https://cloud.githubusercontent.com/assets/3624786/8115653/8bc14802-1085-11e5-9372-962cc31afae6.png",
                        "style": "width: 120px;"
                    }
                },
                {
                    "name": "h3",
                    "attributes": {
                        "style": "line-height: 70px;"
                    },
                    "value": "3 Models of Interaction (Events, Commands, Request/Response)"
                },
                {
                    "name": "notes",
                    "value": [
                        "Miki: ChronosJS is a native javascript library implementing event channels",
                        "It allows high level of granularity by using two levels of registration with AppName and EventName, and supporting wildcard",
                        "ChronosJs provides 3 models of interactions:",
                        "1) The basic events which allows multiple consumers for a single producer",
                        "2) Commands which provides a one2one relationship between consumer and the producer",
                        "3) And Request/Response which extends the commands model by also allowing a return value from the producer",
                        "Chronos is good for sync and async bindings while the data, can be passed by reference or by value as a clone",
                        "It is Lightweight",
                        "with no additional dependencies"
                    ]
                }
            ]
        ]
    },
    {
        "steps": [
            [
                {
                    "name": "img",
                    "attributes": {
                        "src": "https://cloud.githubusercontent.com/assets/3624786/8115653/8bc14802-1085-11e5-9372-962cc31afae6.png",
                        "style": "width: 120px;"
                    }
                },
                {
                    "name": "h3",
                    "attributes": {
                        "style": "line-height: 70px;"
                    },
                    "value": "Synchronous and Asynchronous Binding"
                },
                {
                    "name": "notes",
                    "value": [
                        "Miki: ChronosJS is a native javascript library implementing event channels",
                        "It allows high level of granularity by using two levels of registration with AppName and EventName, and supporting wildcard",
                        "ChronosJs provides 3 models of interactions:",
                        "1) The basic events which allows multiple consumers for a single producer",
                        "2) Commands which provides a one2one relationship between consumer and the producer",
                        "3) And Request/Response which extends the commands model by also allowing a return value from the producer",
                        "Chronos is good for sync and async bindings while the data, can be passed by reference or by value as a clone",
                        "It is Lightweight",
                        "with no additional dependencies"
                    ]
                }
            ]
        ]
    },
    {
        "steps": [
            [
                {
                    "name": "img",
                    "attributes": {
                        "src": "https://cloud.githubusercontent.com/assets/3624786/8115653/8bc14802-1085-11e5-9372-962cc31afae6.png",
                        "style": "width: 120px;"
                    }
                },
                {
                    "name": "h3",
                    "attributes": {
                        "style": "line-height: 70px;"
                    },
                    "value": "Data can be Passed by Reference and By Value"
                },
                {
                    "name": "notes",
                    "value": [
                        "Miki: ChronosJS is a native javascript library implementing event channels",
                        "It allows high level of granularity by using two levels of registration with AppName and EventName, and supporting wildcard",
                        "ChronosJs provides 3 models of interactions:",
                        "1) The basic events which allows multiple consumers for a single producer",
                        "2) Commands which provides a one2one relationship between consumer and the producer",
                        "3) And Request/Response which extends the commands model by also allowing a return value from the producer",
                        "Chronos is good for sync and async bindings while the data, can be passed by reference or by value as a clone",
                        "It is Lightweight",
                        "with no additional dependencies"
                    ]
                }
            ]
        ]
    },
    {
        "steps": [
            [
                {
                    "name": "img",
                    "attributes": {
                        "src": "https://cloud.githubusercontent.com/assets/3624786/8115653/8bc14802-1085-11e5-9372-962cc31afae6.png",
                        "style": "width: 120px;"
                    }
                },
                {
                    "name": "h3",
                    "attributes": {
                        "style": "line-height: 70px;"
                    },
                    "value": "Small Size"
                },
                {
                    "name": "notes",
                    "value": [
                        "Miki: ChronosJS is a native javascript library implementing event channels",
                        "It allows high level of granularity by using two levels of registration with AppName and EventName, and supporting wildcard",
                        "ChronosJs provides 3 models of interactions:",
                        "1) The basic events which allows multiple consumers for a single producer",
                        "2) Commands which provides a one2one relationship between consumer and the producer",
                        "3) And Request/Response which extends the commands model by also allowing a return value from the producer",
                        "Chronos is good for sync and async bindings while the data, can be passed by reference or by value as a clone",
                        "It is Lightweight",
                        "with no additional dependencies"
                    ]
                }
            ]
        ]
    },
    {
        "steps": [
            [
                {
                    "name": "img",
                    "attributes": {
                        "src": "https://cloud.githubusercontent.com/assets/3624786/8115653/8bc14802-1085-11e5-9372-962cc31afae6.png",
                        "style": "width: 120px;"
                    }
                },
                {
                    "name": "h3",
                    "attributes": {
                        "style": "line-height: 70px;"
                    },
                    "value": "No Additional Dependencies"
                },
                {
                    "name": "notes",
                    "value": [
                        "Miki: ChronosJS is a native javascript library implementing event channels",
                        "It allows high level of granularity by using two levels of registration with AppName and EventName, and supporting wildcard",
                        "ChronosJs provides 3 models of interactions:",
                        "1) The basic events which allows multiple consumers for a single producer",
                        "2) Commands which provides a one2one relationship between consumer and the producer",
                        "3) And Request/Response which extends the commands model by also allowing a return value from the producer",
                        "Chronos is good for sync and async bindings while the data, can be passed by reference or by value as a clone",
                        "It is Lightweight",
                        "with no additional dependencies"
                    ]
                }
            ]
        ]
    },
    {
        "steps": [
            [
                {
                    "name": "img",
                    "attributes": {
                        "src": "https://cloud.githubusercontent.com/assets/3624786/8147890/fe536c64-1289-11e5-8934-3033943ef0bd.png",
                        "style": "width: 600px;"
                    }
                },
                {
                    "name": "notes",
                    "value": [
                        "Miki: Overall, we provide an extended functionality over existing frameworks, and it is a good addition to our toolbox"
                    ]
                }
            ]
        ]
    },
    {
        "steps": [
            [
                {
                    "name": "h3",
                    "attributes": {
                        "style": "font-weight: bold;"
                    },
                    "value": "Eat Your Own Dog Food"
                },
                {
                    "name": "img",
                    "attributes": {
                        "src": "https://cloud.githubusercontent.com/assets/3624786/8147552/00d007ce-1279-11e5-9d5c-20b84d2741d7.png",
                        "style": "width: 790px; height: 543px; max-height: none; max-width: none; position: absolute; z-index: 4; left: 80px; top: 6;",
                        "class": "absolute-element"
                    }
                },
                {
                    "name": "notes",
                    "value": [
                        "Itai: ChronosJS is is a core infrastructure for almost any application @LivePerson and it is highly tested in our production systems"
                    ]
                }
            ]
        ]
    },
    {
        "steps": [
            [
                {
                    "name": "h4",
                    "attributes": {
                        "style": "font-weight: bold;"
                    },
                    "value": "The World of Homer - Demo"
                },
                {
                    "name": "div",
                    "attributes": {
                        "style": "width: 100%; height: 550px; max-height: none; max-width: none; background-color: white"
                    },
                    "value": [
                        {
                            "name": "video",
                            "attributes": {
                                "class": "video",
                                "src": "./demo/homer.mov",
                                "autoplay": "autoplay",
                                "loop": "loop",
                                "style": "top: 10px; width: 100%; height: 100%; max-height: none; max-width: none; background-color: white"
                            }
                        }
                    ]
                },
                {
                    "name": "notes",
                    "value": [
                        "Miki: Lets look at an example",
                        "We have an application, where we want to explain to a 5 years old the cycles of the sun and moon",
                        "So we have our rotating moon and sun",
                        "And a small homer, which supposed to be awake when the sun is up, and go to sleep when the moon is shown"
                    ]
                }
            ]
        ]
    },
    {
        "steps": [
            [
                {
                    "name": "h4",
                    "attributes": {
                        "style": "font-weight: bold;"
                    },
                    "value": "ChronosJS Channel"
                },
                {
                    "name": "p",
                    "attributes": {
                        "style": "height: 600px;"
                    },
                    "value": [
                        {
                            "name": "textarea",
                            "attributes": {
                                "id": "angular_chronosjs_channel_snippet",
                                "class": "code absolute-element",
                                "mode": "javascript"
                            },
                            "value": ""
                        }
                    ]
                },
                {
                    "name": "notes",
                    "value": [
                        "Miki: Lets look at the code",
                        "We are using AngulerJS, since it is for 5 years old - Just kidding",
                        "And we created our channel service by instantiating a ChronosJs Channels object"
                    ]
                }
            ]
        ]
    },
    {
        "steps": [
            [
                {
                    "name": "h4",
                    "attributes": {
                        "style": "font-weight: bold;"
                    },
                    "value": "Earth Controller"
                },
                {
                    "name": "p",
                    "attributes": {
                        "style": "height: 600px;"
                    },
                    "value": [
                        {
                            "name": "textarea",
                            "attributes": {
                                "id": "angular_chronosjs_earth_controller_snippet",
                                "class": "code absolute-element",
                                "mode": "javascript"
                            },
                            "value": ""
                        }
                    ]
                },
                {
                    "name": "notes",
                    "value": [
                        "Miki: Next is our Earth controller, where we inject the ChronosJs channels service",
                        "We do some weired calculation on the angle of the sun and trigger an event with the calculation result each 200 millis"
                    ]
                }
            ]
        ]
    },
    {
        "steps": [
            [
                {
                    "name": "h4",
                    "attributes": {
                        "style": "font-weight: bold;"
                    },
                    "value": "Homer Directive"
                },
                {
                    "name": "p",
                    "attributes": {
                        "style": "height: 700px;"
                    },
                    "value": [
                        {
                            "name": "textarea",
                            "attributes": {
                                "id": "angular_chronosjs_homer_directive_snippet",
                                "class": "code absolute-element",
                                "mode": "javascript"
                            },
                            "value": ""
                        }
                    ]
                },
                {
                    "name": "notes",
                    "value": [
                        "Miki: We are using a directive for representing the Homer image,",
                        "and its listenning on the rotation event in order to calculate whether it should sleep or be awake"
                    ]
                }
            ]
        ]
    },
    {
        "steps": [
            [
                {
                    "name": "div",
                    "value": [
                        {
                            "name": "ul",
                            "attributes": {
                                "style": "list-style-type: none; height: 500px; font-weight: bold; margin-top: 200px;"
                            },
                            "value": [
                                {
                                    "name": "li",
                                    "value": "The World of Homer - as a Platform?<br><br>"
                                },
                                {
                                    "name": "li",
                                    "attributes": {
                                        "class": "fragment",
                                        "data-fragment-index": "0"
                                    },
                                    "value": "with other Developers Widgets?"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "notes",
                    "value": [
                        "Itai: Very Cool, But what if we would like to make it a platform",
                        "Miki: WAT? What do you mean?",
                        "Itai: I am a developer, and I would like to create my own Homer widget on your platform"
                    ]
                }
            ]
        ]
    },
    {
        "steps": [
            [
                {
                    "name": "div",
                    "value": [
                        {
                            "name": "ul",
                            "attributes": {
                                "style": "list-style-type: none; height: 500px; font-weight: bold; margin-top: 140px;"
                            },
                            "value": [
                                {
                                    "name": "li",
                                    "value": "Use IFrames<br><br>"
                                },
                                {
                                    "name": "li",
                                    "attributes": {
                                        "class": "fragment",
                                        "data-fragment-index": "0"
                                    },
                                    "value": "Communication?<br><br>"
                                },
                                {
                                    "name": "li",
                                    "attributes": {
                                        "class": "fragment",
                                        "data-fragment-index": "1"
                                    },
                                    "value": "Same Origin Policy (Cross Domain Limit)?"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "notes",
                    "value": [
                        "Itai: You'll probably need to use iframes to load my widget",
                        "And how would you communicate with them?",
                        "What about the same origin policy of the browser?"
                    ]
                }
            ]
        ]
    },
    {
        "steps": [
            [
                {
                    "name": "div",
                    "attributes": {
                        "style": "width: 100%; height: 600px; position: absolute; z-index: 4; left: 0; top: 6px;"
                    },
                    "value": [
                        {
                            "name": "div",
                            "attributes": {
                                "style": "width: 100%; height: 550px; max-height: none; max-width: none;"
                            },
                            "value": [
                                {
                                    "name": "img",
                                    "attributes": {
                                        "src": "https://cloud.githubusercontent.com/assets/3624786/8166576/4275cd2a-13a1-11e5-92e9-830bf6ded6fa.png",
                                        "style": "width: 800px; height: 500px; max-height: none; max-width: none; position: absolute; z-index: 4; left: 100px; top: 6px;",
                                        "class": "absolute-element"
                                    }
                                }
                            ]
                        },
                        {
                            "name": "h3",
                            "attributes": {
                                "class": "absolute-element fragment fade-out",
                                "style": "position: absolute; width: 800px; height: 300px; z-index: 4; left: 100px; top: 550px;"
                            },
                            "value": "Meet <a href=\"https://github.com/LivePersonInc/chronosjs\">chronosjs</a> courier!"
                        },
                        {
                            "name": "span",
                            "attributes": {
                                "class": "absolute-element fragment fade-in",
                                "style": "position: absolute; width: 800px; height: 300px; z-index: 4; left: 100px; top: 550px;"
                            },
                            "value": [
                                {
                                    "name": "h3",
                                    "attributes": {
                                        "class": "absolute-element fragment fade-out"
                                    },
                                    "value": "All Available chronosjs Channels"
                                }
                            ]
                        },
                        {
                            "name": "h3",
                            "attributes": {
                                "class": "absolute-element fragment fade-in",
                                "style": "position: absolute; width: 800px; height: 300px; z-index: 4; left: 100px; top: 550px;"
                            },
                            "value": "Over PostMessage (Cross Domain)"
                        }
                    ]
                },
                {
                    "name": "notes",
                    "value": [
                        "Miki: For that, we have a courier",
                        "Courier allows us to use all the functionality of ChronosJS Channels, cross domain, over post message"
                    ]
                }
            ]
        ]
    },
    {
        "steps": [
            [
                {
                    "name": "div",
                    "attributes": {
                        "style": "width: 100%; height: 600px; position: absolute; z-index: 4; left: 0; top: 6px;"
                    },
                    "value": [
                        {
                            "name": "div",
                            "attributes": {
                                "style": "width: 100%; height: 550px; max-height: none; max-width: none;"
                            },
                            "value": [
                                {
                                    "name": "img",
                                    "attributes": {
                                        "src": "https://cloud.githubusercontent.com/assets/5138735/8149645/eaf26a54-12d3-11e5-80b4-4e1d2c30b4ba.png",
                                        "style": "border: none; box-shadow: none; width: 389px; height: 543px; max-height: none; max-width: none; position: absolute; z-index: 4; left: 300px; top: 6;",
                                        "class": "absolute-element"
                                    }
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "notes",
                    "value": [
                        "Miki: How does courier actually works,",
                        "We have the host, which hold a courier instance.",
                        "Inside, courier holds his own, chronosjs channels instance."
                    ]
                }
            ]
        ]
    },
    {
        "steps": [
            [
                {
                    "name": "div",
                    "attributes": {
                        "style": "width: 100%; height: 600px; position: absolute; z-index: 4; left: 0; top: 6px;"
                    },
                    "value": [
                        {
                            "name": "div",
                            "attributes": {
                                "style": "width: 100%; height: 550px; max-height: none; max-width: none;"
                            },
                            "value": [
                                {
                                    "name": "img",
                                    "attributes": {
                                        "src": "https://cloud.githubusercontent.com/assets/5138735/8149646/eaf8b904-12d3-11e5-8e09-7e9360467bd0.png",
                                        "style": "border: none; box-shadow: none; width: 389px; height: 543px; max-height: none; max-width: none; position: absolute; z-index: 4; left: 300px; top: 6;",
                                        "class": "absolute-element"
                                    }
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "notes",
                    "value": [
                        "Miki: and we have the iFrame which is basically the same.",
                        "On the iframe creation there is a handshake protocol between the host and iframe.",
                        "Only after the handshake is done, there is a secure channel between both parties and events can be passed back and forth.",
                        "The handshake is an internal process that hapens in the background and as a user of the library you do not need to be worried about it."
                    ]
                }
            ]
        ]
    },
    {
        "steps": [
            [
                {
                    "name": "div",
                    "attributes": {
                        "style": "width: 100%; height: 600px; position: absolute; z-index: 4; left: 0; top: 6px;"
                    },
                    "value": [
                        {
                            "name": "div",
                            "attributes": {
                                "style": "width: 100%; height: 550px; max-height: none; max-width: none;"
                            },
                            "value": [
                                {
                                    "name": "img",
                                    "attributes": {
                                        "src": "https://cloud.githubusercontent.com/assets/5138735/8215550/612e2df4-1539-11e5-8c23-b8b775117093.png",
                                        "style": "border: none; box-shadow: none; width: 889px; height: 543px; max-height: none; max-width: none; position: absolute; z-index: 4; left: 50px; top: 6;",
                                        "class": "absolute-element"
                                    }
                                },
                                {
                                    "name": "img",
                                    "attributes": {
                                        "src": "https://cloud.githubusercontent.com/assets/5138735/8215551/6131b8fc-1539-11e5-899e-95a41a46652e.png",
                                        "style": "border: none; box-shadow: none; width: 889px; height: 543px; max-height: none; max-width: none; position: absolute; z-index: 4; left: 50px; top: 6;",
                                        "class": "absolute-element fragment",
                                        "data-fragment-index": "0"
                                    }
                                },
                                {
                                    "name": "img",
                                    "attributes": {
                                        "src": "https://cloud.githubusercontent.com/assets/5138735/8215552/6135d46e-1539-11e5-9c95-47a9b8ff731a.png",
                                        "style": "border: none; box-shadow: none; width: 889px; height: 543px; max-height: none; max-width: none; position: absolute; z-index: 4; left: 50px; top: 6;",
                                        "class": "absolute-element fragment",
                                        "data-fragment-index": "1"
                                    }
                                },
                                {
                                    "name": "img",
                                    "attributes": {
                                        "src": "https://cloud.githubusercontent.com/assets/5138735/8215553/6138683c-1539-11e5-8273-fa2e3bb4baab.png",
                                        "style": "border: none; box-shadow: none; width: 889px; height: 543px; max-height: none; max-width: none; position: absolute; z-index: 4; left: 50px; top: 6;",
                                        "class": "absolute-element fragment",
                                        "data-fragment-index": "2"
                                    }
                                },
                                {
                                    "name": "img",
                                    "attributes": {
                                        "src": "https://cloud.githubusercontent.com/assets/5138735/8215554/614144ac-1539-11e5-9c15-5448003c6b45.png",
                                        "style": "border: none; box-shadow: none; width: 889px; height: 543px; max-height: none; max-width: none; position: absolute; z-index: 4; left: 50px; top: 6;",
                                        "class": "absolute-element fragment",
                                        "data-fragment-index": "3"
                                    }
                                },
                                {
                                    "name": "img",
                                    "attributes": {
                                        "src": "https://cloud.githubusercontent.com/assets/5138735/8215555/614c8aa6-1539-11e5-9c2f-b061aee100bc.png",
                                        "style": "border: none; box-shadow: none; width: 889px; height: 543px; max-height: none; max-width: none; position: absolute; z-index: 4; left: 50px; top: 6;",
                                        "class": "absolute-element fragment",
                                        "data-fragment-index": "4"
                                    }
                                },
                                {
                                    "name": "img",
                                    "attributes": {
                                        "src": "https://cloud.githubusercontent.com/assets/5138735/8215549/612c5e2a-1539-11e5-8313-0516fd440435.png",
                                        "style": "border: none; box-shadow: none; width: 889px; height: 543px; max-height: none; max-width: none; position: absolute; z-index: 4; left: 50px; top: 6;",
                                        "class": "absolute-element fragment",
                                        "data-fragment-index": "5"
                                    }
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "notes",
                    "value": [
                        "Miki: When the iframe has a component that decides to bind to an event via courier",
                        "Courier will proxy the binding through it's internal chronos channels.",
                        "When a component inside the host will trigger an event, courier will send a message via post message,",
                        "indicating there is a trigger from the host.",
                        "The iframe will then translate the message into an event and proxy it to the channels, which will trigger the event as a proxy through courier."

                    ]
                }
            ]
        ]
    },
    {
        "steps": [
            [
                {
                    "name": "h4",
                    "attributes": {
                        "style": "font-weight: bold;"
                    },
                    "value": "ChronosJS Courier (Supervisor)"
                },
                {
                    "name": "div",
                    "attributes": {
                        "style": "height: 154px;"
                    },
                    "value": [
                        {
                            "name": "textarea",
                            "attributes": {
                                "id": "angular_chronosjs_courier_supervisor_snippet.0",
                                "class": "code absolute-element",
                                "mode": "javascript"
                            },
                            "value": ""
                        }
                    ]
                },
                {
                    "name": "div",
                    "attributes": {
                        "style": "height: 250px;",
                        "class": "fragment",
                        "data-fragment-index": "0"

                    },
                    "value": [
                        {
                            "name": "textarea",
                            "attributes": {
                                "id": "angular_chronosjs_courier_supervisor_snippet.1",
                                "class": "code absolute-element",
                                "mode": "javascript"
                            },
                            "value": ""
                        }
                    ]
                },
                {
                    "name": "div",
                    "attributes": {
                        "style": "height: 200px;",
                        "class": "fragment",
                        "data-fragment-index": "1"

                    },
                    "value": [
                        {
                            "name": "textarea",
                            "attributes": {
                                "id": "angular_chronosjs_courier_supervisor_snippet.2",
                                "class": "code absolute-element",
                                "mode": "javascript"
                            },
                            "value": ""
                        }
                    ]
                },
                {
                    "name": "notes",
                    "value": [
                        "Miki: You want a platform, so I'll give you one - Lets enhance our example.",
                        "Our ChronosJS channels service, will now become a ChronosJS Courier Supervisor.",
                        "For each widget, we need an iframe, and for every iframe, we will instantiate a Courier object,",
                        "The Supervisor, will handle instantiation of Couriers, and allow triggering an event via all the available Couriers.",
                        "Since our widget is an iframe, and it is not aware of its location on the page.",
                        "The Supervisor will trigger an event with the position for the created widget, upon initialization"
                    ]
                }
            ]
        ]
    },
    {
        "steps": [
            [
                {
                    "name": "h4",
                    "attributes": {
                        "style": "font-weight: bold;"
                    },
                    "value": "Earth Controller"
                },
                {
                    "name": "div",
                    "attributes": {
                        "style": "height: 280px;"
                    },
                    "value": [
                        {
                            "name": "textarea",
                            "attributes": {
                                "id": "angular_chronosjs_courier_earth_controller_snippet.0",
                                "class": "code absolute-element",
                                "mode": "javascript"
                            },
                            "value": ""
                        }
                    ]
                },
                {
                    "name": "div",
                    "attributes": {
                        "style": "height: 390px;",
                        "class": "fragment",
                        "data-fragment-index": "0"

                    },
                    "value": [
                        {
                            "name": "textarea",
                            "attributes": {
                                "id": "angular_chronosjs_courier_earth_controller_snippet.1",
                                "class": "code absolute-element",
                                "mode": "javascript"
                            },
                            "value": ""
                        }
                    ]
                },
                {
                    "name": "notes",
                    "value": [
                        "Miki: Our earth controller, will now have to create the widgets via the Supervisor, and trigger the rotation event using the supervisor"
                    ]
                }
            ]
        ]
    },
    {
        "steps": [
            [
                {
                    "name": "h4",
                    "attributes": {
                        "style": "font-weight: bold;"
                    },
                    "value": "Simpsons Widget (Cross Domain)"
                },
                {
                    "name": "div",
                    "attributes": {
                        "style": "height: 30px;"
                    },
                    "value": [
                        {
                            "name": "textarea",
                            "attributes": {
                                "id": "angular_chronosjs_courier_homer_widget_snippet.0",
                                "class": "code absolute-element",
                                "mode": "javascript"
                            },
                            "value": ""
                        }
                    ]
                },
                {
                    "name": "div",
                    "attributes": {
                        "style": "height: 460px;",
                        "class": "fragment",
                        "data-fragment-index": "0"

                    },
                    "value": [
                        {
                            "name": "textarea",
                            "attributes": {
                                "id": "angular_chronosjs_courier_homer_widget_snippet.1",
                                "class": "code absolute-element",
                                "mode": "javascript"
                            },
                            "value": ""
                        }
                    ]
                },
                {
                    "name": "notes",
                    "value": [
                        "Miki: We no longer use a directive for a widget, since we cannot assume that all developer use AngularJS for implementing their widgets",
                        "So for this example, we chose to use vanilla JS for creating our widgets.",
                        "The widget logic is the same",
                        "The only difference is the ChronosJS Courier instantiation, instead of the basic ChronosJS Channels",
                        "And binding to the initial position event for calculations"
                    ]
                }
            ]
        ]
    },
    {
        "steps": [
            [
                {
                    "name": "h4",
                    "attributes": {
                        "style": "font-weight: bold;"
                    },
                    "value": "The World of Simpsons Widgets - Demo"
                },
                {
                    "name": "div",
                    "attributes": {
                        "style": "width: 100%; height: 590px; max-height: none; max-width: none; background-color: white"
                    },
                    "value": [
                        {
                            "name": "video",
                            "attributes": {
                                "class": "video",
                                "src": "./demo/platform.mov",
                                "autoplay": "autoplay",
                                "loop": "loop",
                                "style": "top: 2px; width: 100%; height: 100%; max-height: none; max-width: none; background-color: white"
                            }
                        }
                    ]
                },
                {
                    "name": "notes",
                    "value": [
                        "Miki: And this is the result",
                        "@LivePerson, we provide our customers with the ability to embed their own custom widgets in our WebAgent application using Courier",
                        "Itai: Impressive indeed, and it is even nicer, since everyone can now use it!"
                    ]
                }
            ]
        ]
    },
    {
        "steps": [
            [
                {
                    "name": "div",
                    "attributes": {
                        "style": "width: 100%; height: 500px; max-height: none; max-width: none;"
                    },
                    "value": [
                        {
                            "name": "img",
                            "attributes": {
                                "src": "https://cloud.githubusercontent.com/assets/5138735/8149032/bda7608c-12be-11e5-9bba-a4be4d7e56e2.png",
                                "style": "border: none; box-shadow: none; width: 319px; height: 470px; max-height: none; max-width: none; position: absolute; z-index: 4; left: 300px; top: 6;",
                                "class": "absolute-element"
                            }
                        },
                        {
                            "name": "img",
                            "attributes": {
                                "src": "https://travis-ci.org/LivePersonInc/chronosjs.svg",
                                "style": "border: none; box-shadow: none; max-height: none; max-width: none; position: absolute; z-index: 4; left: 360px; top: 496px;",
                                "class": "absolute-element"
                            }
                        },
                        {
                            "name": "img",
                            "attributes": {
                                "src": "https://codeclimate.com/github/LivePersonInc/chronosjs/badges/coverage.svg",
                                "style": "border: none; box-shadow: none; max-height: none; max-width: none; position: absolute; z-index: 4; left: 460px; top: 496px;",
                                "class": "absolute-element"
                            }
                        }
                    ]
                },
                {
                    "name": "div",
                    "attributes": {
                        "class": "absolute-element",
                        "style": "position: absolute; width: 936px; height: 125px; z-index: 4; left: 2px; top: 540px;"
                    },
                    "value": [
                        {
                            "name": "p",
                            "attributes": {
                                "style": "font-size: 31px;"
                            },
                            "value": "@Npm - <a href=\"https://www.npmjs.com/package/chronosjs\">https://www.npmjs.com/package/chronosjs</a>"
                        },
                        {
                            "name": "p",
                            "attributes": {
                                "style": "font-size: 31px;"
                            },
                            "value": "@GitHub - <a href=\"https://github.com/LivePersonInc/chronosjs\">https://github.com/LivePersonInc/chronosjs</a>"
                        }
                    ]
                },
                {
                    "name": "notes",
                    "value": [
                        "Itai: ChronosJS can be found in NPM and in GitHub",
                        "Feel free to use, fork us and contribute more features"
                    ]
                }
            ]
        ]
    },
    {
        "steps": [
            [
                {
                    "name": "div",
                    "attributes": {
                        "style": "width: 100%; height: 600px; max-height: none; max-width: none;"
                    },
                    "value": [
                        {
                            "name": "img",
                            "attributes": {
                                "src": "https://cloud.githubusercontent.com/assets/5138735/8147842/3ca245a6-1287-11e5-8b14-3fa6559eaba6.png",
                                "style": "width: 500px; height: 600px; max-height: none; max-width: none; position: absolute; z-index: 4; left: 230px; top: 6px;",
                                "class": "absolute-element"
                            }
                        }
                    ]
                },
                {
                    "name": "notes",
                    "value": [
                        "Miki & Itai: Meanwhile, Keep calm and JS ON"
                    ]
                }
            ]
        ]
    },
    {
        "steps": [
            [
                {
                    "name": "div",
                    "attributes": {
                        "style": "width: 100%; height: 600px; max-height: none; max-width: none;"
                    },
                    "value": [
                        {
                            "name": "img",
                            "attributes": {
                                "src": "https://cloud.githubusercontent.com/assets/3624786/7810851/4fd1a9a6-03ae-11e5-9297-87fbf50634a6.png",
                                "style": "width: 289px; height: 600px; max-height: none; max-width: none; position: absolute; z-index: 4; left: 369px; top: 6px;",
                                "class": "absolute-element"
                            }
                        }
                    ]
                }
            ]
        ]
    },
    {
        "steps": [
            [
                {
                    "name": "div",
                    "attributes": {
                        "style": "width: 100%; height: 600px; max-height: none; max-width: none;"
                    },
                    "value": [
                        {
                            "name": "img",
                            "attributes": {
                                "src": "https://cloud.githubusercontent.com/assets/3624786/7811015/a7785186-03af-11e5-9647-d7e3faf56ce1.png",
                                "style": "width: 800px; height: 500px; max-height: none; max-width: none; position: absolute; z-index: 4; left: 100px; top: 6px;",
                                "class": "absolute-element"
                            }
                        }
                    ]
                },
                {
                    "name": "notes",
                    "value": [
                        "Miki & Itai: Thank you"
                    ]
                }
            ]
        ]
    }
]
